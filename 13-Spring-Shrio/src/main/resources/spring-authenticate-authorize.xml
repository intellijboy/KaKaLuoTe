<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--****************认证授权测试*****************-->
    <!--1. 配置 SecurityManager!-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/><!--缓存配置-->
        <property name="realm" ref="authenticateAuthorizeRealm"/><!--认证授权Realm-->
        <property name="rememberMeManager" ref="rememberMeManager"></property><!--记住我功能-->
    </bean>
    <!--2.配置ehcache缓存-->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

    <!--3.配置helloRealm-->
    <bean id="authenticateAuthorizeRealm" class="com.shrio.demo.realms.AuthenticateAuthorizeRealm">
        <property name="name" value="helloRealm"></property>
    </bean>
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cipherService" ref="mmyCipherService"></property>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>
    <bean id="mmyCipherService" class="org.apache.shiro.crypto.AesCipherService"></bean>
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="shrio_remember"/>
        <property name="httpOnly" value="true"/>
        <!-- 默认记住7天（单位：秒） -->
        <property name="maxAge" value="600"/>
    </bean>

    <!-- 4. 配置 LifecycleBeanPostProcessor. 可以自动的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- 5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用. -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true" />
    </bean>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!--

    6. 配置 ShiroFilter.
    6.1 id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 <filter-name> 一致.
                      若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 IOC 容器中查找和 <filter-name> 名字对应的 filter bean.

    -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/success"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
        <property name="filters">
            <map>
                <entry key="logout" value-ref="logoutFilter" /><!--退出登陆过滤器-->
            </map>
        </property>
        <property name="filterChainDefinitionMap" ref="resourceFilterMap"/>
    </bean>

    <!--Shrio过滤器-->
    <bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
        <property name="redirectUrl" value="/index.jsp" />
    </bean>

    <!--通过实例工厂获取权限过滤filterMap-->
    <bean id="resourceFilterMap" factory-bean="myFilterMapFactory" factory-method="loadResourceAccessRules"></bean>
    <!--工厂Bean-->
    <bean id="myFilterMapFactory" class="com.shrio.demo.factory.MyFilterMapFactory2"></bean>
</beans>