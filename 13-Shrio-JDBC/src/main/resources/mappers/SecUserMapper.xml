<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.shrio.demo.dao.SecUserMapper">
  <resultMap id="BaseResultMap" type="com.shrio.demo.entity.SecUser">
    <id column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="created_time" jdbcType="TIMESTAMP" property="createdTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    user_id, user_name, password, created_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sec_user
    where user_id = #{userId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from sec_user
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.shrio.demo.entity.SecUser">
    insert into sec_user (user_id, user_name, password, 
      created_time, update_time)
    values (#{userId,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{createdTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.shrio.demo.entity.SecUser">
    insert into sec_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="userName != null">
        user_name,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="createdTime != null">
        created_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="createdTime != null">
        #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.shrio.demo.entity.SecUser">
    update sec_user
    <set>
      <if test="userName != null">
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="createdTime != null">
        created_time = #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.shrio.demo.entity.SecUser">
    update sec_user
    set user_name = #{userName,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      created_time = #{createdTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <select id="selectSecUser" parameterType="string" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from sec_user
    where user_name = #{userName,jdbcType=INTEGER}
  </select>
  <select id="selectRoles" parameterType="string" resultType="string">
    SELECT r.role_name FROM
    (
    SELECT ur.role_id role_id
    FROM sec_user u,sec_user_role ur
    WHERE u.user_id = ur.user_id
    AND u.user_name = #{userName}
    )t,sec_role r
    WHERE t.role_id = r.role_id
  </select>
  <select id="selectPermissions" parameterType="string" resultType="string">
    SELECT DISTINCT p.permission_name
    FROM
    (
    SELECT rp.permission_id permission_id FROM
      (
      SELECT ur.role_id role_id
      FROM sec_user u,sec_user_role ur
      WHERE u.user_id = ur.user_id
      AND u.user_name = #{userName}
      )t1,sec_role_permission rp
    WHERE t1.role_id = rp.role_id
    )t2, sec_permission p
    WHERE t2.permission_id = p.permission_id
  </select>
</mapper>